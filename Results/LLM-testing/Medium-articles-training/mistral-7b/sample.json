{
  "question": [
    "What are the key differences in data models between MongoDB and PostgreSQL?",
    "How do MongoDB and PostgreSQL handle unstructured and semi-structured data?",
    "Which database system, MongoDB or PostgreSQL, is more scalable, and why?",
    "What are the typical use cases for MongoDB and PostgreSQL?",
    "How do MongoDB and PostgreSQL perform in read-heavy and write-heavy workloads?",
    "What are the differences in indexing mechanisms between MongoDB and PostgreSQL?",
    "How do MongoDB and PostgreSQL ensure ACID compliance?",
    "What are the challenges associated with data migration between MongoDB and PostgreSQL?",
    "Which database offers more flexibility in schema design?",
    "What consistency model is used by PostgreSQL and MongoDB?",
    "How well do MongoDB and PostgreSQL integrate with other technologies?",
    "What are the licensing and cost models for MongoDB and PostgreSQL?",
    "What kind of community support and ecosystem exist for MongoDB and PostgreSQL?",
    "What are the performance tuning techniques for MongoDB and PostgreSQL?",
    "How do MongoDB and PostgreSQL handle backups and disaster recovery?",
    "How to use useEffect in React?",
    "How to use collections in PostgreSQL?",
    "How is MongoDB different from MySQL?"
  ],
  "answer": [
    " The key differences in data models between MongoDB and PostgreSQL lie in their fundamental approaches to managing data.\n\nMongoDB uses a document-based data model, which is based on a collection of JSON-style documents. In this model, each document can have a different structure, allowing for flexible and dynamic data modeling. On the other hand, PostgreSQL uses a relational data model, where data is organized into tables with defined schemas.\n\nThese differences result in several implications:\n\n1. Data organization: In MongoDB, data is organized as collections of documents, while in PostgreSQL it's organized as tables with specific fields and relationships between those tables.\n2. Flexibility: MongoDB's document-based model allows for more flexibility in managing unstructured or semi-structured data, making it a good choice for web and mobile apps, real-time analytics, and content management systems. PostgreSQL, on the other hand, is better suited for companies requiring strict data consistency and complex data manipulations due to its relational model and schema definition.\n3. Scalability: MongoDB's document-based model allows for easy aggregation and scalability that can handle complex queries using document nested structures and indexes. PostgreSQL, being a relational database, offers robust query capabilities with a wide range of query types, but may require more planning and design to ensure optimal performance.\n\nUltimately, the choice between MongoDB and PostgreSQL will depend on the specific requirements, including the size and complexity of the data being stored, the workload demands, and the balance between flexible data modeling and strict data consistency.",
    " MongoDB is specifically designed to handle large amounts of unstructured and semi-structured data. It achieves this through its document-oriented data model, which allows for flexible schema and easy storage of complex data types. On the other hand, PostgreSQL is better suited for complex transactions and data analysis, and while it can handle some unstructured and semi-structured data, it is not optimized for it in the same way MongoDB is.",
    " According to the context provided, MongoDB is more scalable than PostgreSQL due to several optimizations, including its document-oriented data model, horizontal scaling through sharding, in-memory storage capabilities, and indexing support. These features make MongoDB well-suited for handling large amounts of unstructured and semi-structured data and achieve high performance and fast data access and retrieval.",
    " MongoDB is a popular NoSQL database known for its scalability, high performance, and flexible data model. Its typical use cases include:\n\n1. E-commerce Platforms: MongoDB can be used to store and manage large amounts of customer data, such as product information, user profiles, and order history. Its support for efficient querying and indexing makes it well-suited for e-commerce platforms, where fast and responsive performance is critical.\n2. Real-time Analytics: MongoDB can be used to store and analyze large amounts of data in real-time. Its support for horizontal scaling and efficient indexing makes it well-suited for processing high-volume, high-velocity data streams. An example use case would be a financial services company using MongoDB to store and analyze stock market data in real-time, allowing traders to make informed decisions based on up-to-date information.\n3. Content Management Systems: MongoDB's flexible data model and scalability make it an excellent choice for content management systems, where the data being managed can be unstructured or semi-structured. For example, a news website could use MongoDB to store and manage articles, user comments, and other types of content.\n4. Mobile Applications: MongoDB's flexibility and scalability also make it a good choice for mobile applications, where data can be constantly changing and the need for offline access is important. For example, a ride-hailing app could use MongoDB to store and manage user location data, trip history, and other relevant information.\n\nPostgreSQL is a powerful relational database management system known for its performance, stability, and reliability. Its typical use cases include:\n\n1. Transactional Applications: PostgreSQL's support for complex query operations and ability to ensure data integrity make it an excellent choice for transactional applications where data consistency is critical. For example, a banking application could use PostgreSQL to store and manage customer account information, transactions, and other financial data.\n2. Data Warehouses: PostgreSQL's performance, scalability, and support for advanced querying features make it an excellent choice for data warehousing applications where data is often analyzed in batch processes. For example, a retail company could use PostgreSQL to store and analyze customer purchase history and other transactional data to gain insights into sales trends and customer behavior.\n3. Operational Intelligence: PostgreSQL's advanced features, such as multi-version concurrency control and custom data types, make it well-suited for operational intelligence applications where complex queries are needed to extract valuable insights from large datasets in real-time. For example, a logistics company could use PostgreSQL to analyze real-time data from sensors on their vehicles to optimize delivery routes and reduce fuel consumption.\n4. Scientific and Statistical Applications: PostgreSQL's advanced statistical functions and support for complex queries make it an excellent choice for scientific and statistical applications where complex analysis of large datasets is required. For example, a research institution could use PostgreSQL to store and analyze genomic data or climate data to gain insights into trends and correlations.",
    " MongoDB is generally faster for read-heavy or write-heavy workloads compared to PostgreSQL. This is due to several optimizations, including its document-oriented data model, horizontal scaling through sharding, in-memory storage capabilities, and memory-mapped files for big datasets.\n\nPostgreSQL, on the other hand, offers robust performance, stability, and reliability. It is designed to handle large amounts of structured data and provides features such as indexing, query optimization, caching, multi-version concurrency control, and advanced custom data types and aggregates. These features can be used to optimize data storage and retrieval for particular use cases. However, they may come with a performance overhead compared to MongoDB for read-heavy or write-heavy workloads.",
    " Both MongoDB and PostgreSQL support indexing to improve query performance. However, they have different approaches due to their document-based and relational data models respectively.\n\nMongoDB's indexing is based on the document structure and schema. It allows creating indexes on various fields within a collection, including single fields, compound fields (multi-key), text fields, geospatial data, and array elements. Indexes in MongoDB can significantly improve query performance, especially for large collections with frequently queried fields. MongoDB also supports multi-key indexes which help in indexing fields that are not contiguous but related by some correlation.\n\nPostgreSQL's indexing is based on the tables and their defined schemas. It offers various types of indexes, including B-tree, Hash, GiST, GIN, and SP-GiST indexes. Each type is suitable for different query patterns. For example, a B-tree index is useful for exact matches or range queries, while a GiST index is more appropriate for multi-dimensional spatial data. PostgreSQL's query optimizer uses cost-based analysis to determine the most efficient execution plan based on available indexes and their suitability to the query.\n\nIn summary, while both databases offer indexing capabilities, MongoDB focuses on indexing document collections based on their schema, and PostgreSQL offers a range of index types tailored to different query patterns in relation to table schemas.",
    " MongoDB and PostgreSQL both ensure data consistency through different means due to their distinct data models and query languages.\n\nMongoDB, as a NoSQL database, does not enforce strict schema validation but provides features like document validation, indexing, and transactional operations through its CRUD (Create, Read, Update, Delete) operations at the collection level. This helps maintain some aspects of ACID compliance, mainly durability and consistency in write operations within a single document or collection.\n\nPostgreSQL, as a relational database, enforces schema validation and provides robust support for ACID transactions. It supports various data types, transactions, and rollback capabilities to ensure data integrity, durability, and consistency. SQL queries executed on PostgreSQL enable more complex transactions that span multiple tables or rows.\n\nIn summary:\n\n- MongoDB ensures some aspects of ACID compliance through validation within collections, indexing, and transactional operations at the document level.\n- PostgreSQL provides full support for ACID transactions and enforces schema validation for data integrity and consistency across relationships between tables.",
    " The context provided in the given blog post discusses the differences between MongoDB and PostgreSQL, including their respective benefits, query languages, and performance characteristics. However, it does not specifically mention any challenges associated with data migration between these two databases. Therefore, based on the context alone, I don't have an answer to your question.\n\nRegarding user greetings and thanks messages, I will respond appropriately as follows:\n\n* Greeting: Hello! I'm here to help answer any questions you have related to the given context.\n* Thanks: Thank you for asking a question! I'm glad I could help provide some clarity on the topic. If you have any further queries, don't hesitate to ask!",
    " MongoDB offers more flexibility in schema design as it uses a document-oriented data model with optional schemas. This allows it to store data in the form of JSON-like documents, providing more flexibility than traditional relational databases like PostgreSQL.",
    " Both PostgreSQL and MongoDB support various consistency models to cater to different use cases and requirements.\n\nPostgreSQL primarily follows the ACID (Atomicity, Consistency, Isolation, Durability) model, ensuring that transactions are processed reliably and data remains consistent even in the face of errors or failures. PostgreSQL also supports the snapshot isolation level, which allows for multiple transactions to read from a consistent snapshot of the database while not affecting each other.\n\nMongoDB offers different consistency levels based on eventual consistency models:\n- Strong Consistency: All nodes have the same copy of the data at any given moment.\n- Eventual Consistency: Data propagates asynchronously across all nodes, with eventual consistency being achieved after some time.\n- Session Consistency: Writes to a single document within a session are guaranteed to be visible to that session and all later sessions for that document.\n- Causally Consistent: Write operations are ordered based on their causality, ensuring that the order of events is maintained across the cluster.\n\nThe choice between consistency models depends on the specific use case, data requirements, and application design. For applications where strong consistency is a must (e.g., financial systems), PostgreSQL may be a better fit due to its ACID compliance. However, for more flexible or distributed applications, MongoDB's eventual consistency options might be more suitable.",
    " Both MongoDB and PostgreSQL can integrate well with various technologies. MongoDB is known for its compatibility with unstructured data, making it a good choice for handling large amounts of unstructured and semi-structured data in real-time. It supports horizontal scaling and efficient indexing, making it suitable for processing high-volume, high-velocity data streams. MongoDB can work seamlessly with a wide range of web frameworks such as Ruby on Rails, PHP, node.js, Hibernate, Django (Python), and more.\n\nOn the other hand, PostgreSQL is a sophisticated open-source relational database solution designed for enterprise use. It offers the ability to run both SQL and JSON queries, allowing for both relational and non-relational data management. PostgreSQL can work seamlessly with a wide range of web frameworks as well, including but not limited to: Ruby on Rails, PHP, node.js, Hibernate, Django (Python), and more. Additionally, PostgreSQL's replication capabilities make it simple to expand websites to as many database servers as necessary.\n\nTherefore, both databases can integrate well with various technologies depending on the specific use case and requirements.",
    " Both MongoDB and PostgreSQL offer various licensing and cost models.\n\nMongoDB:\n- MongoDB Community Server: Free and open-source under the Serverside Public License (SSPL).\n- MongoDB Atlas: A fully managed cloud database service with a pay-as-you-go pricing model.\n- MongoDB Enterprise: A commercial version of MongoDB that includes additional features, support, and tools. It offers various licensing models such as term licenses, perpetual licenses, or subscription-based.\n\nPostgreSQL:\n- PostgreSQL Open Source: Free and open-source under the PostgreSQL License.\n- PostgreSQL Enterprise Version: Offered by companies like EDB (EnterpriseDB) and 2ndQuadrant that provide additional features, support, and tools. These versions may come with different licensing models such as commercial licenses or subscription-based.\n- Amazon RDS for PostgreSQL: A fully managed cloud database service provided by AWS with a pay-as-you-go pricing model.",
    " Both MongoDB and PostgreSQL have extensive and well-developed user communities. For MongoDB, resources include the official documentation, the MongoDB Atlas driver connection guide, and the MongoDB Shell documentation. Additionally, AWS provides an RDS service for PostgreSQL. The PostgreSQL community also offers comprehensive resources, including its own website, cybertec-postgresql.com, which provides solutions for those who use PostgreSQL. In terms of popularity, MongoDB is often associated with NoSQL databases and is well-suited for handling large amounts of unstructured and semi-structured data in real-time. PostgreSQL, on the other hand, is a sophisticated open-source relational database solution designed for enterprise use, offering both SQL and JSON queries for relational and non-relational data management. Both databases have active communities and offer robust resources for users.",
    " Both MongoDB and PostgreSQL offer various performance tuning techniques to optimize their respective databases. Here are some of the key performance optimization techniques for each database:\n\n**MongoDB:**\n- Document Design: Properly designing your documents can help improve query performance by reducing the need for complex index scans.\n- Indexing: MongoDB supports various types of indexes, including single field, compound, and multi-key indexes. Using the appropriate indexes based on your data access patterns can significantly improve read and write performance.\n- Sharding: For large datasets, sharding can help distribute data across multiple nodes for better scalability and performance.\n- In-memory storage: MongoDB offers in-memory storage options, such as WiredTiger and MMAPv1, which can help improve query performance by keeping frequently accessed data in memory.\n- Query optimization: MongoDB's query language supports various operators and functions for filtering and transforming data. Optimizing queries by using appropriate indexes and efficient query structures can help improve query performance.\n\n**PostgreSQL:**\n- Indexing: PostgreSQL offers a wide range of indexing options, including B-tree, Hash, GIN, GiST, and SP-GiST indexes. Properly designing your indexes based on your data access patterns can help improve query performance.\n- Query optimization: The query optimizer in PostgreSQL uses cost-based analysis to select the most efficient execution plan for each query. Optimizing queries by using appropriate indexes, rewriting queries, and reducing query complexity can help improve query performance.\n- Caching: PostgreSQL supports various caching mechanisms, including shared buffers, write-ahead log (WAL) buffering, and custom-defined caches. Using these caching mechanisms effectively can help improve query performance by reducing the need to read data from disk.\n- Concurrency control: PostgreSQL's multi-version concurrency control feature enables effective management of multiple concurrent transactions, which can help improve performance by minimizing lock contention and allowing for more parallel execution.",
    " MongoDB and PostgreSQL have different approaches to handling backups and disaster recovery.\n\nMongoDB provides several methods for creating backups, including using the built-in mongodump utility or third-party tools like OpsManager or Mongobackup. These backups can be stored locally or remotely, and MongoDB also supports point-in-time restores, allowing you to restore to a specific moment in time. For disaster recovery, MongoDB recommends setting up replica sets or shards for high availability and data durability.\n\nPostgreSQL supports various backup methods as well, including the pg_dump utility, WAL (Write Ahead Log) archiving, and continuous backups using tools like Barman or PgBackrest. PostgreSQL also supports point-in-time recovery, allowing you to restore to a specific moment in time. For disaster recovery, PostgreSQL recommends setting up standby servers or replication for high availability and data durability.\n\nIn summary, both databases provide backup and disaster recovery solutions, but they have slightly different approaches due to their document-oriented versus relational data models. MongoDB focuses more on flexibility and scalability with its document-based model, while PostgreSQL offers the robustness and reliability of a traditional relational database.",
    " The context provided does not include information on using `useEffect` in React. Therefore, I don't have an answer for that question. However, if you need help with setting up a PostgreSQL or MongoDB database using the mentioned techniques, feel free to ask. Also, please find below some general information about React's `useEffect` hook:\n\n`useEffect` is a Hook in React which lets you perform side effects in function components. Side effects include things such as fetching data, subscribing to events, or manually changing the browser's URL. It's important to note that using `useEffect` correctly can help prevent performance issues and improve the rendering of your component tree.\n\nHere is an example of how to use `useEffect` for fetching data from an API:\n\n```javascript\nimport React, { useState, useEffect } from 'react';\n\nfunction MyComponent() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch('/api/data');\n      const json = await response.json();\n      setData(json);\n    }\n\n    fetchData();\n  }, []); // empty dependency array means this effect runs once on mount and unmount\n\n  return <div>{data.map((item) => <p key={item.id}>{item.name}</p>)}</div>;\n}\n```\n\nIn the example above, `useEffect` is used to fetch data from an API when the component mounts (the empty dependency array makes this happen). The fetched data is then stored in state using React's `useState`. The component renders the data by mapping over it and creating a list of paragraph elements.",
    " In the provided context, there is no information about using collections specifically in PostgreSQL. However, I can explain that in PostgreSQL, you can store JSON or JSONB data in a table column with those datatypes, and then work with the data using SQL queries and the '->>' operator to extract specific values.\n\nHere's an example of creating a collection-like structure in PostgreSQL:\n\n1. Create Table:\n```sql\nCREATE TABLE items ( id SERIAL PRIMARY KEY, data jsonb );\n```\n2. Insert Data:\n```sql\nINSERT INTO items (data) VALUES ('{\"item1\": {\"name\": \"Item 1\", \"price\": 5}, \"item2\": {\"name\": \"Item 2\", \"price\": 8}}');\n```\n3. Query Data:\n```sql\nSELECT id, data->>'item1'->>'name' AS item_name, data->>'item1'->>'price' AS item_price\nFROM items;\n```\nThis will return something like:\n```markdown\n id |   item_name    | item_price\n----+----------------+----------\n  1 | Item 1         |      5\n  1 | Item 2         |      8\n```\n4. Update Data:\n```sql\nUPDATE items SET data = data || '{\"item3\": {\"name\": \"Item 3\", \"price\": 10}}' WHERE id = 1;\n```\nThis will add a new item to the existing JSON data for that record.\n5. Delete Data:\n```sql\nDELETE FROM items WHERE id = 1;\n```\nThis will delete the entire record with the specified ID.",
    " MongoDB and MySQL are both popular database management systems, but they have some key differences due to their underlying data models.\n\nMongoDB uses a document-based data model, which allows each document in a collection to have a different structure. This means that the documents do not need to strictly adhere to a predefined schema. On the other hand, MySQL is a relational database management system, which organizes data into tables with defined schemas.\n\nAdditionally, MongoDB's query language (MQL) and indexing capabilities are optimized for semi-structured and unstructured data, making it well-suited for handling JSON-like documents. In contrast, MySQL is optimized for structured data and uses SQL as its query language.\n\nLastly, MongoDB is often chosen for use cases that require flexible data modeling, such as web and mobile apps, real-time analytics, and content management systems. Whereas, MySQL is a better choice for applications that require strict data consistency and complex data manipulations, like financial systems, data warehousing, and business intelligence software.\n\nRegarding your question about the differences between MongoDB and PostgreSQL, I'd be happy to help with that as well! Just let me know if you have a specific question in mind."
  ],
  "ground_truth": [
    "The key differences in data models between MongoDB and PostgreSQL are as follows:\n\n1. **Data Structure**:\n   - **MongoDB**: Utilizes a document-based data model. It stores data in JSON-style documents, allowing each document to have a different structure. This provides flexibility and dynamic data modeling, making it suitable for applications requiring adaptable schemas.\n   - **PostgreSQL**: Uses a relational data model. Data is organized into tables with defined schemas, where each row corresponds to an individual record and each column represents a specific field. This structure helps eliminate redundant information and ensures data integrity through constraints.\n\n2. **Flexibility vs. Consistency**:\n   - **MongoDB**: Offers more flexibility in terms of data modeling, which is beneficial for applications like web and mobile apps, real-time analytics, and content management systems.\n   - **PostgreSQL**: Emphasizes strict data consistency and complex data manipulations, making it ideal for applications like financial systems, data warehousing, and business intelligence software.\n\n3. **Complexity Handling**:\n   - **MongoDB**: Designed to handle large amounts of unstructured and semi-structured data, making it effective for read-heavy or write-heavy workloads.\n   - **PostgreSQL**: Better suited for complex transactions and data analysis, leveraging its structured approach to manage intricate queries and data relationships.\n\nIn summary, the choice between MongoDB and PostgreSQL depends on specific requirements, such as the complexity of data and the need for flexibility versus strict consistency.",
    "MongoDB is designed specifically for handling large amounts of unstructured and semi-structured data. It utilizes a document-oriented data model, which allows for flexibility and efficiency in storing such data. Additionally, MongoDB supports horizontal scaling through sharding and has in-memory storage capabilities, which contribute to its performance in managing unstructured data.\n\nOn the other hand, PostgreSQL is better suited for complex transactions and data analysis but may not be as optimized for unstructured data as MongoDB. It is traditionally structured as a relational database, which involves predefined schemas that can be limiting for unstructured data handling.\n\nIf you have any more questions or need further assistance, feel free to ask!",
    "MongoDB is considered to be more scalable than PostgreSQL. This is primarily because MongoDB is designed for high performance and scalability, particularly in handling large amounts of unstructured and semi-structured data. It achieves scalability through horizontal scaling via sharding, which allows for distributing data across multiple servers. Additionally, its document-oriented data model and in-memory storage capabilities also contribute to its efficient performance and the ability to manage large datasets effectively. \n\nIn contrast, while PostgreSQL is robust and reliable, it is typically better suited for complex transactions and structured data rather than scalability in the same context as MongoDB.",
    "**Typical Use Cases for MongoDB:**\n\n1. **Real-time Analytics**: MongoDB can store and analyze large volumes of data in real-time, making it suitable for applications like financial services where traders need up-to-date stock market data.\n\n2. **E-commerce Platforms**: MongoDB is ideal for managing vast amounts of customer data, such as product information and order history, allowing for fast and personalized shopping experiences.\n\n**Typical Use Cases for PostgreSQL:**\n\n1. **Web Technology and NoSQL Workloads**: PostgreSQL can handle high request volumes for modern websites, making it a robust choice for web applications.\n\n2. **Financial Industry**: With its compliance to ACID requirements, PostgreSQL is perfect for Online Transaction Processing (OLTP) tasks, making it a strong choice for organizations like Capital One and American Express.\n\nThese databases serve different needs based on data structure and application requirements, with MongoDB focusing on flexibility and scalability, and PostgreSQL emphasizing data integrity and complex querying capabilities.",
    "MongoDB is faster for both read-heavy and write-heavy workloads, making it well-suited for high performance and scalability. On the other hand, PostgreSQL is better suited for complex transactions and data analysis, particularly with structured data.",
    "I don't have an answer.",
    "I don't have an answer.",
    "I don't have an answer.",
    "MongoDB offers more flexibility in schema design. It uses a document-oriented data model with optional schemas, allowing it to store data in the form of JSON-like documents, which provides greater flexibility compared to traditional relational databases like PostgreSQL.",
    "PostgreSQL uses a strict data consistency model through constraints and referential integrity, making it suitable for applications that require high data consistency. In contrast, MongoDB employs a more flexible consistency model that allows for eventual consistency, fitting well with its document-based data model and use cases that prioritize scalability and performance.",
    "MongoDB and PostgreSQL both integrate well with various technologies. \n\n**MongoDB** is designed for high performance and scalability, making it suitable for handling unstructured and semi-structured data. It can efficiently process high-volume data streams and is often used in real-time analytics applications. \n\n**PostgreSQL**, on the other hand, is a sophisticated open-source relational database that supports both SQL and JSON queries, enabling it to manage relational and non-relational data. It works seamlessly with a wide range of web frameworks, including Ruby on Rails, PHP, node.js, Hibernate, and Django (Python). Its replication capabilities also allow for easy expansion across multiple database servers.\n\nBoth databases have their strengths in integration, with MongoDB excelling in handling large amounts of unstructured data and PostgreSQL being versatile in supporting complex transactions and web technologies.",
    "I don't have an answer.",
    "MongoDB has a strong community support system and extensive documentation available online. It provides resources for developers to learn and troubleshoot issues, and there are numerous forums and user groups dedicated to discussing MongoDB technologies.\n\nPostgreSQL also boasts an extensive and well-developed user community. This community contributes to a wealth of resources, including documentation, forums, and various tools that help users maximize their use of the database. PostgreSQL emphasizes community-driven development, which enhances its ecosystem significantly.\n\nBoth databases benefit from active communities that help users navigate challenges and implement best practices.",
    "I don't have an answer.",
    "I don't have an answer.",
    "I don't have an answer.",
    "I don't have an answer.",
    "I don't have an answer."
  ],
  "contexts": [
    [
      "DELETEFROM customersWHERE customer_info->>'name' = 'John Doe';IV. Differences between MongoDB and PostgreSQL\n1. Data ModelMongoDB uses a document-based data model, while PostgreSQL uses a relationaldata model.MongoDB uses a document-oriented data model, which is based on a collection ofJSON-style documents. In this model, each document can have a different structure,allowing for flexible and dynamic data modeling. Because of this, MongoDB is agood choice for companies requiring adaptable and dynamic data structures, likeweb and mobile apps, real-time analytics, and content management systems. Thisdocument-based model allows for easy aggregation and scalability that can handlecomplex queries using document nested structures and indexes.On the other hand, PostgreSQL uses a relational data model, based on a collection oftables with defined schemas. In this model, data is organized into tables, whereeach row represents an individual record, and each column corresponds to aspecific field of the record. Data in the tables is organized in a way that eliminates29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.12/25",
      "redundant information and ensures data integrity through constraints andreferential integrity. This characteristic makes PostgreSQL a powerful tool forcompanies that require strict data consistency and complex data manipulations,such as financial systems, data warehousing, and business intelligence software.In general, the choice between MongoDB and PostgreSQL will depend on thespecific requirements, including the size and complexity of the data being stored,the specific workload demands, and the balance between flexible data modellingand strict data consistency.2. Query languageMongoDB and PostgreSQL have different query languages because of the differentdata models used that they choose.MongoDB uses a query language based on the MongoDB query syntax, which isdesigned to support querying and manipulating the semi-structured data stored inMongoDB documents. MQL is used to search and retrieve data from MongoDBcollections. The syntax is straightforward and easy to understand, even for non-technical users. This makes MongoDB a good choice for developers who need toquickly prototype and build applications.Meanwhile, PostgreSQL uses a query language based on the Structured QueryLanguage (SQL), which is a widely used and well-established standard for relationaldatabases. The SQL query language supports a wide range of query types, includingsimple select statements, as well as more complex join operations, subqueries, andtransactions. SQL also supports the use of subqueries, transactions, and storedprocedures for more complex data manipulations. Queries in PostgreSQL can beexecuted using the SELECT statement, and results can be returned in a variety offormats, including tables, arrays, and key-value pairs.3. PerformanceMongoDB is faster for read-heavy or write-heavy workloads, while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and",
      "Table of ContentI. IntroductionII. MongoDB- Overview of MongoDB and NoSQL databases- MongoDB Basic Concepts- Get started with MongoDBIII. PostgreSQL- Overview of PostgreSQL- How to use PostgreSQLIV. Differences between MongoDB and PostgreSQL- Data Model- Query language- PerformanceV. Use cases- MongoDB- PostgreSQLVI. ConclusionI. Introductionre you aware that numerous service providers will collect your data while youuse your computer and mobile device? Your present position will be utilized,for instance, when you use Google Maps to navigate; when you shop online, yourcredit card information will be used to pay the fees; etc. Do you know how is such amassive amount of data collected and stored to better the lives of individuals?These pieces of information are kept in a place called a database. It\u2019s like a hugewarehouse that can hold a lot of data and be used by many people at the same time.Because of this, the database is an important part of all information systems, nomatter how large or small they are or what type of business they are for.A29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.2/25",
      "while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and semi-structured data. It achieves thisperformance through several optimizations, including its document-oriented datamodel, horizontal scaling through sharding, in-memory storage capabilities, and29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science"
    ],
    [
      "https://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.14/25",
      "https://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.13/25",
      "https://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.15/25",
      "while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and semi-structured data. It achieves thisperformance through several optimizations, including its document-oriented datamodel, horizontal scaling through sharding, in-memory storage capabilities, and29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science"
    ],
    [
      "while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and semi-structured data. It achieves thisperformance through several optimizations, including its document-oriented datamodel, horizontal scaling through sharding, in-memory storage capabilities, and29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science",
      "indexing support. Its flexible data model also allows for easy aggregation andscalability, as well as efficient storage and retrieval of data.In addition, fast data access and retrieval are made possible by in-memory storageand indexing, and MongoDB\u2019s query language offers a wide range of operators andfunctions for data filtering and transformation. Additionally, working with bigdatasets can be more performant thanks to MongoDB\u2019s usage of memory-mappedfiles.PostgreSQL is widely known for its performance, stability, and reliability. It isdesigned to handle large amounts of structured data and provides a range offeatures for optimizing performance, including indexing, query optimization, andcaching. PostgreSQL also allows for the efficient retrieval of data based on specificconditions. The query optimizer in PostgreSQL uses cost-based analysis to select themost efficient execution plan for each query, and the database also supports in-memory caching of data, which can greatly improve query performance.Furthermore, PostgreSQL provides a range of advanced features, such as multi-version concurrency control, which enables effective management of multipleconcurrent transactions, and the ability to create custom data types and aggregates.These features can be used to optimise data storage and retrieval for particular usecases.V. Use casesMongoDB:MongoDB is a popular NoSQL database known for its scalability, high performance,and flexible data model.Case 1: E-commerce PlatformsMongoDB can be used to store and manage large amounts of customer data, such asproduct information, user profiles, and order history. Its support for efficientquerying and indexing makes it well-suited for e-commerce platforms, where fastand responsive performance is critical. For example, an online retailer could useMongoDB to store and manage information about its products, customers, andorders, allowing for fast and personalized shopping experiences for users.29/07/2024, 12:41Dive into MongoDB &",
      "redundant information and ensures data integrity through constraints andreferential integrity. This characteristic makes PostgreSQL a powerful tool forcompanies that require strict data consistency and complex data manipulations,such as financial systems, data warehousing, and business intelligence software.In general, the choice between MongoDB and PostgreSQL will depend on thespecific requirements, including the size and complexity of the data being stored,the specific workload demands, and the balance between flexible data modellingand strict data consistency.2. Query languageMongoDB and PostgreSQL have different query languages because of the differentdata models used that they choose.MongoDB uses a query language based on the MongoDB query syntax, which isdesigned to support querying and manipulating the semi-structured data stored inMongoDB documents. MQL is used to search and retrieve data from MongoDBcollections. The syntax is straightforward and easy to understand, even for non-technical users. This makes MongoDB a good choice for developers who need toquickly prototype and build applications.Meanwhile, PostgreSQL uses a query language based on the Structured QueryLanguage (SQL), which is a widely used and well-established standard for relationaldatabases. The SQL query language supports a wide range of query types, includingsimple select statements, as well as more complex join operations, subqueries, andtransactions. SQL also supports the use of subqueries, transactions, and storedprocedures for more complex data manipulations. Queries in PostgreSQL can beexecuted using the SELECT statement, and results can be returned in a variety offormats, including tables, arrays, and key-value pairs.3. PerformanceMongoDB is faster for read-heavy or write-heavy workloads, while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and",
      "Dive into MongoDB & PostgreSQLContents: MongoDB, PostgreSQL, SQL and NoSQL databasesML-learners\u00b7FollowPublished inSFU Professional Computer Science13 min read\u00b7Feb 11, 2023ListenShare\nCR: https://www.toptal.com/database/database-design-bad-practicesIn this post, we will use PostgreSQL and MongoDB as examples to introduce thedifferences between these two types of databases and their respective benefits. Read on tolearn when and where you can apply them.Authors: Guanghua Yang, Jianan Li, Kelvin Li, Lexi Ke, Freya LiThis blog is written and maintained by students in the Master of Science in ProfessionalComputer Science Program at Simon Fraser University as part of their course credit. Tolearn more about this unique program, please visit sfu.ca/computing/mpcs.\nOpen in appSign upSign inSearch\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.1/25"
    ],
    [
      "Real World Example: eBay: https://www.mongodb.com/blog/post/ebay-building-mission-critical-multi-data-center-applications-with-mongodbCase 2: Real-time AnalyticsIn this use case, MongoDB can be used to store and analyze large amounts of data inreal-time. MongoDB\u2019s support for horizontal scaling and efficient indexing makes itwell-suited for processing high-volume, high-velocity data streams. For example, afinancial services company could use MongoDB to store and analyze stock marketdata in real-time, allowing traders to make informed decisions based on up-to-dateinformation.Real World Example: Weather Channel: https://www.mongodb.com/press/mongodb-chosen-technology-provider-deliver-accurate-data-weather-channel-hundreds-thousandsPostgreSQLPostgreSQL is a sophisticated, open-source relational database solution designed forenterprise use. It offers the ability to run both SQL and JSON queries, allowing forboth relational and non-relational data management.Case 1: Web technology and NoSQL workloadsTo meet the demands of consumers, a modern website may have to handle a largenumber of requests, potentially ranging from tens of thousands to hundreds ofthousands per second. The PostgreSQL community has made great efforts toaddress the scalability issues.PostgreSQL can work seamlessly with a wide range of web frameworks, includingbut not restricted to: Ruby on Rails, PHP, node.js, Hibernate, Django (Python), and alot more. The replication capabilities of PostgreSQL make it simple to expandwebsites to as many database servers as necessary.Aside from functioning as a relational database, PostgreSQL also has the capabilityto perform as a NoSQL-style data storage system. There does not have to be aconflict between the relational environment and the document-orientedenvironment. Both are available in a single product.Real-World Example: Reddit29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science",
      "Table of ContentI. IntroductionII. MongoDB- Overview of MongoDB and NoSQL databases- MongoDB Basic Concepts- Get started with MongoDBIII. PostgreSQL- Overview of PostgreSQL- How to use PostgreSQLIV. Differences between MongoDB and PostgreSQL- Data Model- Query language- PerformanceV. Use cases- MongoDB- PostgreSQLVI. ConclusionI. Introductionre you aware that numerous service providers will collect your data while youuse your computer and mobile device? Your present position will be utilized,for instance, when you use Google Maps to navigate; when you shop online, yourcredit card information will be used to pay the fees; etc. Do you know how is such amassive amount of data collected and stored to better the lives of individuals?These pieces of information are kept in a place called a database. It\u2019s like a hugewarehouse that can hold a lot of data and be used by many people at the same time.Because of this, the database is an important part of all information systems, nomatter how large or small they are or what type of business they are for.A29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.2/25",
      "Case 2: Financial IndustryFor the financial sector, PostgreSQL is ideal. Since PostgreSQL complies with allACID requirements, it is perfect for OLTP (Online Transaction Processing) tasks.PostgreSQL\u2019s exceptional OLTP abilities made it a top choice, it is also a stronganalytical database that integrates well with mathematical tools like MATLAB and R.Real World Example: Capital One and American ExpressVI. ConclusionIn this blog post, we first provided a brief overview of two popular databases:MongoDB and PostgreSQL, then contrasted their benefits and drawbacks, and lastdemonstrated various use cases for each. I hope this has given you a better grasp ofthem. MongoDB is a NoSQL database with a flexible database that is ideal forapplications that need to constantly update unstructured data. The relationaldatabase PostgreSQL, on the other hand, supports complex query operations andcan ensure data integrity when using structured data models. These two databaseshave their own strengths and weaknesses, and users need to choose according tothe needs of the program.If you want to know more about these two databases, you can refer to the followingmaterials:https://www.mongodb.com/compare/mongodb-postgresqlhttps://www.mongodb.com/nosql-explained/nosql-vs-sqlVII. Referenceshttps://www.mongodb.com/docs/manual/core/schema-validation/specify-json-schema/specify-allowed-field-values/https://en.wikipedia.org/wiki/PostgreSQLhttps://www.mongodb.com/docs/manual/crud/29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.16/25",
      "indexing support. Its flexible data model also allows for easy aggregation andscalability, as well as efficient storage and retrieval of data.In addition, fast data access and retrieval are made possible by in-memory storageand indexing, and MongoDB\u2019s query language offers a wide range of operators andfunctions for data filtering and transformation. Additionally, working with bigdatasets can be more performant thanks to MongoDB\u2019s usage of memory-mappedfiles.PostgreSQL is widely known for its performance, stability, and reliability. It isdesigned to handle large amounts of structured data and provides a range offeatures for optimizing performance, including indexing, query optimization, andcaching. PostgreSQL also allows for the efficient retrieval of data based on specificconditions. The query optimizer in PostgreSQL uses cost-based analysis to select themost efficient execution plan for each query, and the database also supports in-memory caching of data, which can greatly improve query performance.Furthermore, PostgreSQL provides a range of advanced features, such as multi-version concurrency control, which enables effective management of multipleconcurrent transactions, and the ability to create custom data types and aggregates.These features can be used to optimise data storage and retrieval for particular usecases.V. Use casesMongoDB:MongoDB is a popular NoSQL database known for its scalability, high performance,and flexible data model.Case 1: E-commerce PlatformsMongoDB can be used to store and manage large amounts of customer data, such asproduct information, user profiles, and order history. Its support for efficientquerying and indexing makes it well-suited for e-commerce platforms, where fastand responsive performance is critical. For example, an online retailer could useMongoDB to store and manage information about its products, customers, andorders, allowing for fast and personalized shopping experiences for users.29/07/2024, 12:41Dive into MongoDB &"
    ],
    [
      "while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and semi-structured data. It achieves thisperformance through several optimizations, including its document-oriented datamodel, horizontal scaling through sharding, in-memory storage capabilities, and29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science",
      "redundant information and ensures data integrity through constraints andreferential integrity. This characteristic makes PostgreSQL a powerful tool forcompanies that require strict data consistency and complex data manipulations,such as financial systems, data warehousing, and business intelligence software.In general, the choice between MongoDB and PostgreSQL will depend on thespecific requirements, including the size and complexity of the data being stored,the specific workload demands, and the balance between flexible data modellingand strict data consistency.2. Query languageMongoDB and PostgreSQL have different query languages because of the differentdata models used that they choose.MongoDB uses a query language based on the MongoDB query syntax, which isdesigned to support querying and manipulating the semi-structured data stored inMongoDB documents. MQL is used to search and retrieve data from MongoDBcollections. The syntax is straightforward and easy to understand, even for non-technical users. This makes MongoDB a good choice for developers who need toquickly prototype and build applications.Meanwhile, PostgreSQL uses a query language based on the Structured QueryLanguage (SQL), which is a widely used and well-established standard for relationaldatabases. The SQL query language supports a wide range of query types, includingsimple select statements, as well as more complex join operations, subqueries, andtransactions. SQL also supports the use of subqueries, transactions, and storedprocedures for more complex data manipulations. Queries in PostgreSQL can beexecuted using the SELECT statement, and results can be returned in a variety offormats, including tables, arrays, and key-value pairs.3. PerformanceMongoDB is faster for read-heavy or write-heavy workloads, while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and",
      "indexing support. Its flexible data model also allows for easy aggregation andscalability, as well as efficient storage and retrieval of data.In addition, fast data access and retrieval are made possible by in-memory storageand indexing, and MongoDB\u2019s query language offers a wide range of operators andfunctions for data filtering and transformation. Additionally, working with bigdatasets can be more performant thanks to MongoDB\u2019s usage of memory-mappedfiles.PostgreSQL is widely known for its performance, stability, and reliability. It isdesigned to handle large amounts of structured data and provides a range offeatures for optimizing performance, including indexing, query optimization, andcaching. PostgreSQL also allows for the efficient retrieval of data based on specificconditions. The query optimizer in PostgreSQL uses cost-based analysis to select themost efficient execution plan for each query, and the database also supports in-memory caching of data, which can greatly improve query performance.Furthermore, PostgreSQL provides a range of advanced features, such as multi-version concurrency control, which enables effective management of multipleconcurrent transactions, and the ability to create custom data types and aggregates.These features can be used to optimise data storage and retrieval for particular usecases.V. Use casesMongoDB:MongoDB is a popular NoSQL database known for its scalability, high performance,and flexible data model.Case 1: E-commerce PlatformsMongoDB can be used to store and manage large amounts of customer data, such asproduct information, user profiles, and order history. Its support for efficientquerying and indexing makes it well-suited for e-commerce platforms, where fastand responsive performance is critical. For example, an online retailer could useMongoDB to store and manage information about its products, customers, andorders, allowing for fast and personalized shopping experiences for users.29/07/2024, 12:41Dive into MongoDB &",
      "Real World Example: eBay: https://www.mongodb.com/blog/post/ebay-building-mission-critical-multi-data-center-applications-with-mongodbCase 2: Real-time AnalyticsIn this use case, MongoDB can be used to store and analyze large amounts of data inreal-time. MongoDB\u2019s support for horizontal scaling and efficient indexing makes itwell-suited for processing high-volume, high-velocity data streams. For example, afinancial services company could use MongoDB to store and analyze stock marketdata in real-time, allowing traders to make informed decisions based on up-to-dateinformation.Real World Example: Weather Channel: https://www.mongodb.com/press/mongodb-chosen-technology-provider-deliver-accurate-data-weather-channel-hundreds-thousandsPostgreSQLPostgreSQL is a sophisticated, open-source relational database solution designed forenterprise use. It offers the ability to run both SQL and JSON queries, allowing forboth relational and non-relational data management.Case 1: Web technology and NoSQL workloadsTo meet the demands of consumers, a modern website may have to handle a largenumber of requests, potentially ranging from tens of thousands to hundreds ofthousands per second. The PostgreSQL community has made great efforts toaddress the scalability issues.PostgreSQL can work seamlessly with a wide range of web frameworks, includingbut not restricted to: Ruby on Rails, PHP, node.js, Hibernate, Django (Python), and alot more. The replication capabilities of PostgreSQL make it simple to expandwebsites to as many database servers as necessary.Aside from functioning as a relational database, PostgreSQL also has the capabilityto perform as a NoSQL-style data storage system. There does not have to be aconflict between the relational environment and the document-orientedenvironment. Both are available in a single product.Real-World Example: Reddit29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science"
    ],
    [
      "indexing support. Its flexible data model also allows for easy aggregation andscalability, as well as efficient storage and retrieval of data.In addition, fast data access and retrieval are made possible by in-memory storageand indexing, and MongoDB\u2019s query language offers a wide range of operators andfunctions for data filtering and transformation. Additionally, working with bigdatasets can be more performant thanks to MongoDB\u2019s usage of memory-mappedfiles.PostgreSQL is widely known for its performance, stability, and reliability. It isdesigned to handle large amounts of structured data and provides a range offeatures for optimizing performance, including indexing, query optimization, andcaching. PostgreSQL also allows for the efficient retrieval of data based on specificconditions. The query optimizer in PostgreSQL uses cost-based analysis to select themost efficient execution plan for each query, and the database also supports in-memory caching of data, which can greatly improve query performance.Furthermore, PostgreSQL provides a range of advanced features, such as multi-version concurrency control, which enables effective management of multipleconcurrent transactions, and the ability to create custom data types and aggregates.These features can be used to optimise data storage and retrieval for particular usecases.V. Use casesMongoDB:MongoDB is a popular NoSQL database known for its scalability, high performance,and flexible data model.Case 1: E-commerce PlatformsMongoDB can be used to store and manage large amounts of customer data, such asproduct information, user profiles, and order history. Its support for efficientquerying and indexing makes it well-suited for e-commerce platforms, where fastand responsive performance is critical. For example, an online retailer could useMongoDB to store and manage information about its products, customers, andorders, allowing for fast and personalized shopping experiences for users.29/07/2024, 12:41Dive into MongoDB &",
      "DELETEFROM customersWHERE customer_info->>'name' = 'John Doe';IV. Differences between MongoDB and PostgreSQL\n1. Data ModelMongoDB uses a document-based data model, while PostgreSQL uses a relationaldata model.MongoDB uses a document-oriented data model, which is based on a collection ofJSON-style documents. In this model, each document can have a different structure,allowing for flexible and dynamic data modeling. Because of this, MongoDB is agood choice for companies requiring adaptable and dynamic data structures, likeweb and mobile apps, real-time analytics, and content management systems. Thisdocument-based model allows for easy aggregation and scalability that can handlecomplex queries using document nested structures and indexes.On the other hand, PostgreSQL uses a relational data model, based on a collection oftables with defined schemas. In this model, data is organized into tables, whereeach row represents an individual record, and each column corresponds to aspecific field of the record. Data in the tables is organized in a way that eliminates29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.12/25",
      "Dive into MongoDB & PostgreSQLContents: MongoDB, PostgreSQL, SQL and NoSQL databasesML-learners\u00b7FollowPublished inSFU Professional Computer Science13 min read\u00b7Feb 11, 2023ListenShare\nCR: https://www.toptal.com/database/database-design-bad-practicesIn this post, we will use PostgreSQL and MongoDB as examples to introduce thedifferences between these two types of databases and their respective benefits. Read on tolearn when and where you can apply them.Authors: Guanghua Yang, Jianan Li, Kelvin Li, Lexi Ke, Freya LiThis blog is written and maintained by students in the Master of Science in ProfessionalComputer Science Program at Simon Fraser University as part of their course credit. Tolearn more about this unique program, please visit sfu.ca/computing/mpcs.\nOpen in appSign upSign inSearch\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.1/25",
      "redundant information and ensures data integrity through constraints andreferential integrity. This characteristic makes PostgreSQL a powerful tool forcompanies that require strict data consistency and complex data manipulations,such as financial systems, data warehousing, and business intelligence software.In general, the choice between MongoDB and PostgreSQL will depend on thespecific requirements, including the size and complexity of the data being stored,the specific workload demands, and the balance between flexible data modellingand strict data consistency.2. Query languageMongoDB and PostgreSQL have different query languages because of the differentdata models used that they choose.MongoDB uses a query language based on the MongoDB query syntax, which isdesigned to support querying and manipulating the semi-structured data stored inMongoDB documents. MQL is used to search and retrieve data from MongoDBcollections. The syntax is straightforward and easy to understand, even for non-technical users. This makes MongoDB a good choice for developers who need toquickly prototype and build applications.Meanwhile, PostgreSQL uses a query language based on the Structured QueryLanguage (SQL), which is a widely used and well-established standard for relationaldatabases. The SQL query language supports a wide range of query types, includingsimple select statements, as well as more complex join operations, subqueries, andtransactions. SQL also supports the use of subqueries, transactions, and storedprocedures for more complex data manipulations. Queries in PostgreSQL can beexecuted using the SELECT statement, and results can be returned in a variety offormats, including tables, arrays, and key-value pairs.3. PerformanceMongoDB is faster for read-heavy or write-heavy workloads, while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and"
    ],
    [
      "redundant information and ensures data integrity through constraints andreferential integrity. This characteristic makes PostgreSQL a powerful tool forcompanies that require strict data consistency and complex data manipulations,such as financial systems, data warehousing, and business intelligence software.In general, the choice between MongoDB and PostgreSQL will depend on thespecific requirements, including the size and complexity of the data being stored,the specific workload demands, and the balance between flexible data modellingand strict data consistency.2. Query languageMongoDB and PostgreSQL have different query languages because of the differentdata models used that they choose.MongoDB uses a query language based on the MongoDB query syntax, which isdesigned to support querying and manipulating the semi-structured data stored inMongoDB documents. MQL is used to search and retrieve data from MongoDBcollections. The syntax is straightforward and easy to understand, even for non-technical users. This makes MongoDB a good choice for developers who need toquickly prototype and build applications.Meanwhile, PostgreSQL uses a query language based on the Structured QueryLanguage (SQL), which is a widely used and well-established standard for relationaldatabases. The SQL query language supports a wide range of query types, includingsimple select statements, as well as more complex join operations, subqueries, andtransactions. SQL also supports the use of subqueries, transactions, and storedprocedures for more complex data manipulations. Queries in PostgreSQL can beexecuted using the SELECT statement, and results can be returned in a variety offormats, including tables, arrays, and key-value pairs.3. PerformanceMongoDB is faster for read-heavy or write-heavy workloads, while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and",
      "db.createCollection(\"users\", {  validator: {    $jsonSchema: {      bsonType: \"object\",      required: [\"username\", \"password\"],      properties: {        name: {          bsonType: \"string\"        },        password: {          bsonType: \"string\",          minLength: 8        }      }    }  }})III. PostgreSQL\n1. Overview of PostgreSQLPostgreSQL is an open-source relational database management system (RDBMS)that is well-known for its advanced SQL features, scalability, high availability, andstrong security and data integrity. It is a community-driven development projectthat emphasizes scalability and standard compliance. PostgreSQL provides a rangeof advanced SQL functions, including support for complex data types andtransactions. The system is highly scalable and features built-in replication andconnection pooling for high availability. It is capable of processing complex queriesefficiently even at large scales and has robust security features like fine-grainedaccess control and encryption. The user community of PostgreSQL is extensive andwell-developed, providing ample resources for users.\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.8/25",
      "client.close();});import pymongoimport dnsclient = pymongo.MongoClient(\"mongodb+srv://kay:<Password>@cluster0.mongodb.netdb = client.test3.2 MongoDB CRUD Operations1. Create a document (collection)Document can be inserted into a collection through MongoDB Shell using db.<collection>.insertOne(). Below is an example of inserting a document into theinventory collection. Note that if there wasn\u2019t a collection named \u201csoundtrack\u201d priorto this command being executed, this command will generate the \u201csoundtrack\u201dcollection automatically.db.soundtrack.insertOne({ name: \"soundtrack01\", status: \"A\", length: { time: 351, uom: \"sec\" } })2. Query documentsDocuments can be queried through MongoDB Shell using db.<collection>.find(),note that the keywords of the query are denoted by a dollar sign \u201c$\u201d. Below is anexample that retrieves all documents from the soundtrack collection where the\u201cstatus\u201d field is either \u201cA\u201d or \u201cC\u201d:db.soundtrack.find( { status: { $in: [ \"A\", \"C\" ] } } )This is equivalent to this SQL statement:29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.6/25",
      "SELECT * FROM soundtrack WHERE status in (\"A\", \"C\")3. Update documentsDocuments can be updated through MongoDB Shell using db.<collection>.updateOne(), note that the keywords of the query are denoted by adollar sign \u201c$\u201d. Below is an example that updates the first document where the field\u201cname\u201d equals \u201csoundtrack01\u201d, the $set keyword will update the field \u201cuom\u201d to\u201cmin\u201d and the field \u201dupdated\u201d to \u201cP\u201d.db.soundtrack.updateOne({ name: \"soundtrack01\" },{ $set: { \"uom\": \"min\", \"updated\": \"P\" }})4. Delete documentsDocuments can be deleted through MongoDB Shell using db.<collection>.deleteOne(). Below is an example that deletes the first document wherethe field \u201cname\u201d equals \u201csoundtrack01\u201ddb.inventory.deleteOne( {\"name\": \"soundtrack01\" } )5. Create a collection with a validation schemaAlthough by default the collection in MongoDB doesn\u2019t enforce a schema, it canenforce a validation schema if provided with the requirements. When validationschema is enforced, documents that didn\u2019t fulfill the requirements will not be ableto be saved into the collection. Below is an example of a validation schema thatrequires two fields: \u201cusername\u201d and \u201cpassword\u201d where the username has to be astring, and the password also has to be a string with at least 8 characters.29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.7/25"
    ],
    [
      "Dive into MongoDB & PostgreSQLContents: MongoDB, PostgreSQL, SQL and NoSQL databasesML-learners\u00b7FollowPublished inSFU Professional Computer Science13 min read\u00b7Feb 11, 2023ListenShare\nCR: https://www.toptal.com/database/database-design-bad-practicesIn this post, we will use PostgreSQL and MongoDB as examples to introduce thedifferences between these two types of databases and their respective benefits. Read on tolearn when and where you can apply them.Authors: Guanghua Yang, Jianan Li, Kelvin Li, Lexi Ke, Freya LiThis blog is written and maintained by students in the Master of Science in ProfessionalComputer Science Program at Simon Fraser University as part of their course credit. Tolearn more about this unique program, please visit sfu.ca/computing/mpcs.\nOpen in appSign upSign inSearch\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.1/25",
      "redundant information and ensures data integrity through constraints andreferential integrity. This characteristic makes PostgreSQL a powerful tool forcompanies that require strict data consistency and complex data manipulations,such as financial systems, data warehousing, and business intelligence software.In general, the choice between MongoDB and PostgreSQL will depend on thespecific requirements, including the size and complexity of the data being stored,the specific workload demands, and the balance between flexible data modellingand strict data consistency.2. Query languageMongoDB and PostgreSQL have different query languages because of the differentdata models used that they choose.MongoDB uses a query language based on the MongoDB query syntax, which isdesigned to support querying and manipulating the semi-structured data stored inMongoDB documents. MQL is used to search and retrieve data from MongoDBcollections. The syntax is straightforward and easy to understand, even for non-technical users. This makes MongoDB a good choice for developers who need toquickly prototype and build applications.Meanwhile, PostgreSQL uses a query language based on the Structured QueryLanguage (SQL), which is a widely used and well-established standard for relationaldatabases. The SQL query language supports a wide range of query types, includingsimple select statements, as well as more complex join operations, subqueries, andtransactions. SQL also supports the use of subqueries, transactions, and storedprocedures for more complex data manipulations. Queries in PostgreSQL can beexecuted using the SELECT statement, and results can be returned in a variety offormats, including tables, arrays, and key-value pairs.3. PerformanceMongoDB is faster for read-heavy or write-heavy workloads, while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and",
      "while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and semi-structured data. It achieves thisperformance through several optimizations, including its document-oriented datamodel, horizontal scaling through sharding, in-memory storage capabilities, and29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science",
      "db.createCollection(\"users\", {  validator: {    $jsonSchema: {      bsonType: \"object\",      required: [\"username\", \"password\"],      properties: {        name: {          bsonType: \"string\"        },        password: {          bsonType: \"string\",          minLength: 8        }      }    }  }})III. PostgreSQL\n1. Overview of PostgreSQLPostgreSQL is an open-source relational database management system (RDBMS)that is well-known for its advanced SQL features, scalability, high availability, andstrong security and data integrity. It is a community-driven development projectthat emphasizes scalability and standard compliance. PostgreSQL provides a rangeof advanced SQL functions, including support for complex data types andtransactions. The system is highly scalable and features built-in replication andconnection pooling for high availability. It is capable of processing complex queriesefficiently even at large scales and has robust security features like fine-grainedaccess control and encryption. The user community of PostgreSQL is extensive andwell-developed, providing ample resources for users.\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.8/25"
    ],
    [
      "Case 2: Financial IndustryFor the financial sector, PostgreSQL is ideal. Since PostgreSQL complies with allACID requirements, it is perfect for OLTP (Online Transaction Processing) tasks.PostgreSQL\u2019s exceptional OLTP abilities made it a top choice, it is also a stronganalytical database that integrates well with mathematical tools like MATLAB and R.Real World Example: Capital One and American ExpressVI. ConclusionIn this blog post, we first provided a brief overview of two popular databases:MongoDB and PostgreSQL, then contrasted their benefits and drawbacks, and lastdemonstrated various use cases for each. I hope this has given you a better grasp ofthem. MongoDB is a NoSQL database with a flexible database that is ideal forapplications that need to constantly update unstructured data. The relationaldatabase PostgreSQL, on the other hand, supports complex query operations andcan ensure data integrity when using structured data models. These two databaseshave their own strengths and weaknesses, and users need to choose according tothe needs of the program.If you want to know more about these two databases, you can refer to the followingmaterials:https://www.mongodb.com/compare/mongodb-postgresqlhttps://www.mongodb.com/nosql-explained/nosql-vs-sqlVII. Referenceshttps://www.mongodb.com/docs/manual/core/schema-validation/specify-json-schema/specify-allowed-field-values/https://en.wikipedia.org/wiki/PostgreSQLhttps://www.mongodb.com/docs/manual/crud/29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.16/25",
      "while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and semi-structured data. It achieves thisperformance through several optimizations, including its document-oriented datamodel, horizontal scaling through sharding, in-memory storage capabilities, and29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science",
      "Since there is so much information in the database, we need to use a tool to workwith it quickly and effectively. \u201cDatabase Management System\u201d is the name of thistool. The first generation of DBMS was released in the 1960s, and since then, varioustypes have been made for different use. And the two most popular forms arerelational databases, like PostgreSQL, and NoSQL databases, like MongoDB.In this post, we will use PostgreSQL and MongoDB as examples to introduce thedifferences between these two types of databases and their respective benefits. Readon to learn when and where you can apply them.II. MongoDB\n1. Overview of MongoDB and NoSQL databasesMongoDB is a widely used cross-platform document-oriented NoSQL database. Ituses a document-oriented data model with optional schemas, which allows it tostore data in the form of JSON-like documents, hence providing more flexibilitythan traditional relational databases. There exist many other NoSQL databases thatused different models: e.g. Redis used the key-value pair model, Cassandra andBigtable used the wide-column model etc.2. MongoDB Basic Concepts2.1 DocumentA document in MongoDB is a JSON-like piece of record that can consist of multiplefields, where each field can contain different types of data e.g. string, integer, date,or even a primary key referring to another document. It is equivalent to one row in\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.3/25",
      "Dive into MongoDB & PostgreSQLContents: MongoDB, PostgreSQL, SQL and NoSQL databasesML-learners\u00b7FollowPublished inSFU Professional Computer Science13 min read\u00b7Feb 11, 2023ListenShare\nCR: https://www.toptal.com/database/database-design-bad-practicesIn this post, we will use PostgreSQL and MongoDB as examples to introduce thedifferences between these two types of databases and their respective benefits. Read on tolearn when and where you can apply them.Authors: Guanghua Yang, Jianan Li, Kelvin Li, Lexi Ke, Freya LiThis blog is written and maintained by students in the Master of Science in ProfessionalComputer Science Program at Simon Fraser University as part of their course credit. Tolearn more about this unique program, please visit sfu.ca/computing/mpcs.\nOpen in appSign upSign inSearch\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.1/25"
    ],
    [
      "redundant information and ensures data integrity through constraints andreferential integrity. This characteristic makes PostgreSQL a powerful tool forcompanies that require strict data consistency and complex data manipulations,such as financial systems, data warehousing, and business intelligence software.In general, the choice between MongoDB and PostgreSQL will depend on thespecific requirements, including the size and complexity of the data being stored,the specific workload demands, and the balance between flexible data modellingand strict data consistency.2. Query languageMongoDB and PostgreSQL have different query languages because of the differentdata models used that they choose.MongoDB uses a query language based on the MongoDB query syntax, which isdesigned to support querying and manipulating the semi-structured data stored inMongoDB documents. MQL is used to search and retrieve data from MongoDBcollections. The syntax is straightforward and easy to understand, even for non-technical users. This makes MongoDB a good choice for developers who need toquickly prototype and build applications.Meanwhile, PostgreSQL uses a query language based on the Structured QueryLanguage (SQL), which is a widely used and well-established standard for relationaldatabases. The SQL query language supports a wide range of query types, includingsimple select statements, as well as more complex join operations, subqueries, andtransactions. SQL also supports the use of subqueries, transactions, and storedprocedures for more complex data manipulations. Queries in PostgreSQL can beexecuted using the SELECT statement, and results can be returned in a variety offormats, including tables, arrays, and key-value pairs.3. PerformanceMongoDB is faster for read-heavy or write-heavy workloads, while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and",
      "DELETEFROM customersWHERE customer_info->>'name' = 'John Doe';IV. Differences between MongoDB and PostgreSQL\n1. Data ModelMongoDB uses a document-based data model, while PostgreSQL uses a relationaldata model.MongoDB uses a document-oriented data model, which is based on a collection ofJSON-style documents. In this model, each document can have a different structure,allowing for flexible and dynamic data modeling. Because of this, MongoDB is agood choice for companies requiring adaptable and dynamic data structures, likeweb and mobile apps, real-time analytics, and content management systems. Thisdocument-based model allows for easy aggregation and scalability that can handlecomplex queries using document nested structures and indexes.On the other hand, PostgreSQL uses a relational data model, based on a collection oftables with defined schemas. In this model, data is organized into tables, whereeach row represents an individual record, and each column corresponds to aspecific field of the record. Data in the tables is organized in a way that eliminates29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.12/25",
      "indexing support. Its flexible data model also allows for easy aggregation andscalability, as well as efficient storage and retrieval of data.In addition, fast data access and retrieval are made possible by in-memory storageand indexing, and MongoDB\u2019s query language offers a wide range of operators andfunctions for data filtering and transformation. Additionally, working with bigdatasets can be more performant thanks to MongoDB\u2019s usage of memory-mappedfiles.PostgreSQL is widely known for its performance, stability, and reliability. It isdesigned to handle large amounts of structured data and provides a range offeatures for optimizing performance, including indexing, query optimization, andcaching. PostgreSQL also allows for the efficient retrieval of data based on specificconditions. The query optimizer in PostgreSQL uses cost-based analysis to select themost efficient execution plan for each query, and the database also supports in-memory caching of data, which can greatly improve query performance.Furthermore, PostgreSQL provides a range of advanced features, such as multi-version concurrency control, which enables effective management of multipleconcurrent transactions, and the ability to create custom data types and aggregates.These features can be used to optimise data storage and retrieval for particular usecases.V. Use casesMongoDB:MongoDB is a popular NoSQL database known for its scalability, high performance,and flexible data model.Case 1: E-commerce PlatformsMongoDB can be used to store and manage large amounts of customer data, such asproduct information, user profiles, and order history. Its support for efficientquerying and indexing makes it well-suited for e-commerce platforms, where fastand responsive performance is critical. For example, an online retailer could useMongoDB to store and manage information about its products, customers, andorders, allowing for fast and personalized shopping experiences for users.29/07/2024, 12:41Dive into MongoDB &",
      "Dive into MongoDB & PostgreSQLContents: MongoDB, PostgreSQL, SQL and NoSQL databasesML-learners\u00b7FollowPublished inSFU Professional Computer Science13 min read\u00b7Feb 11, 2023ListenShare\nCR: https://www.toptal.com/database/database-design-bad-practicesIn this post, we will use PostgreSQL and MongoDB as examples to introduce thedifferences between these two types of databases and their respective benefits. Read on tolearn when and where you can apply them.Authors: Guanghua Yang, Jianan Li, Kelvin Li, Lexi Ke, Freya LiThis blog is written and maintained by students in the Master of Science in ProfessionalComputer Science Program at Simon Fraser University as part of their course credit. Tolearn more about this unique program, please visit sfu.ca/computing/mpcs.\nOpen in appSign upSign inSearch\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.1/25"
    ],
    [
      "Dive into MongoDB & PostgreSQLContents: MongoDB, PostgreSQL, SQL and NoSQL databasesML-learners\u00b7FollowPublished inSFU Professional Computer Science13 min read\u00b7Feb 11, 2023ListenShare\nCR: https://www.toptal.com/database/database-design-bad-practicesIn this post, we will use PostgreSQL and MongoDB as examples to introduce thedifferences between these two types of databases and their respective benefits. Read on tolearn when and where you can apply them.Authors: Guanghua Yang, Jianan Li, Kelvin Li, Lexi Ke, Freya LiThis blog is written and maintained by students in the Master of Science in ProfessionalComputer Science Program at Simon Fraser University as part of their course credit. Tolearn more about this unique program, please visit sfu.ca/computing/mpcs.\nOpen in appSign upSign inSearch\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.1/25",
      "while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and semi-structured data. It achieves thisperformance through several optimizations, including its document-oriented datamodel, horizontal scaling through sharding, in-memory storage capabilities, and29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science",
      "Real World Example: eBay: https://www.mongodb.com/blog/post/ebay-building-mission-critical-multi-data-center-applications-with-mongodbCase 2: Real-time AnalyticsIn this use case, MongoDB can be used to store and analyze large amounts of data inreal-time. MongoDB\u2019s support for horizontal scaling and efficient indexing makes itwell-suited for processing high-volume, high-velocity data streams. For example, afinancial services company could use MongoDB to store and analyze stock marketdata in real-time, allowing traders to make informed decisions based on up-to-dateinformation.Real World Example: Weather Channel: https://www.mongodb.com/press/mongodb-chosen-technology-provider-deliver-accurate-data-weather-channel-hundreds-thousandsPostgreSQLPostgreSQL is a sophisticated, open-source relational database solution designed forenterprise use. It offers the ability to run both SQL and JSON queries, allowing forboth relational and non-relational data management.Case 1: Web technology and NoSQL workloadsTo meet the demands of consumers, a modern website may have to handle a largenumber of requests, potentially ranging from tens of thousands to hundreds ofthousands per second. The PostgreSQL community has made great efforts toaddress the scalability issues.PostgreSQL can work seamlessly with a wide range of web frameworks, includingbut not restricted to: Ruby on Rails, PHP, node.js, Hibernate, Django (Python), and alot more. The replication capabilities of PostgreSQL make it simple to expandwebsites to as many database servers as necessary.Aside from functioning as a relational database, PostgreSQL also has the capabilityto perform as a NoSQL-style data storage system. There does not have to be aconflict between the relational environment and the document-orientedenvironment. Both are available in a single product.Real-World Example: Reddit29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science",
      "Case 2: Financial IndustryFor the financial sector, PostgreSQL is ideal. Since PostgreSQL complies with allACID requirements, it is perfect for OLTP (Online Transaction Processing) tasks.PostgreSQL\u2019s exceptional OLTP abilities made it a top choice, it is also a stronganalytical database that integrates well with mathematical tools like MATLAB and R.Real World Example: Capital One and American ExpressVI. ConclusionIn this blog post, we first provided a brief overview of two popular databases:MongoDB and PostgreSQL, then contrasted their benefits and drawbacks, and lastdemonstrated various use cases for each. I hope this has given you a better grasp ofthem. MongoDB is a NoSQL database with a flexible database that is ideal forapplications that need to constantly update unstructured data. The relationaldatabase PostgreSQL, on the other hand, supports complex query operations andcan ensure data integrity when using structured data models. These two databaseshave their own strengths and weaknesses, and users need to choose according tothe needs of the program.If you want to know more about these two databases, you can refer to the followingmaterials:https://www.mongodb.com/compare/mongodb-postgresqlhttps://www.mongodb.com/nosql-explained/nosql-vs-sqlVII. Referenceshttps://www.mongodb.com/docs/manual/core/schema-validation/specify-json-schema/specify-allowed-field-values/https://en.wikipedia.org/wiki/PostgreSQLhttps://www.mongodb.com/docs/manual/crud/29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.16/25"
    ],
    [
      "DELETEFROM customersWHERE customer_info->>'name' = 'John Doe';IV. Differences between MongoDB and PostgreSQL\n1. Data ModelMongoDB uses a document-based data model, while PostgreSQL uses a relationaldata model.MongoDB uses a document-oriented data model, which is based on a collection ofJSON-style documents. In this model, each document can have a different structure,allowing for flexible and dynamic data modeling. Because of this, MongoDB is agood choice for companies requiring adaptable and dynamic data structures, likeweb and mobile apps, real-time analytics, and content management systems. Thisdocument-based model allows for easy aggregation and scalability that can handlecomplex queries using document nested structures and indexes.On the other hand, PostgreSQL uses a relational data model, based on a collection oftables with defined schemas. In this model, data is organized into tables, whereeach row represents an individual record, and each column corresponds to aspecific field of the record. Data in the tables is organized in a way that eliminates29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.12/25",
      "Dive into MongoDB & PostgreSQLContents: MongoDB, PostgreSQL, SQL and NoSQL databasesML-learners\u00b7FollowPublished inSFU Professional Computer Science13 min read\u00b7Feb 11, 2023ListenShare\nCR: https://www.toptal.com/database/database-design-bad-practicesIn this post, we will use PostgreSQL and MongoDB as examples to introduce thedifferences between these two types of databases and their respective benefits. Read on tolearn when and where you can apply them.Authors: Guanghua Yang, Jianan Li, Kelvin Li, Lexi Ke, Freya LiThis blog is written and maintained by students in the Master of Science in ProfessionalComputer Science Program at Simon Fraser University as part of their course credit. Tolearn more about this unique program, please visit sfu.ca/computing/mpcs.\nOpen in appSign upSign inSearch\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.1/25",
      "https://www.mongodb.com/docs/atlas/driver-connection/https://www.mongodb.com/docs/mongodb-shell/connect/https://aws.amazon.com/rds/postgresql/what-is-postgresql/https://www.cybertec-postgresql.com/en/postgresql-overview/solutions-who-uses-postgresql/\nFollowWritten by ML-learners3 Followers\u00b7Writer for SFU Professional Computer ScienceMore from ML-learners and SFU Professional Computer ScienceMongodbPostgresqlNoSQLDatabaseSql\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.17/25",
      "indexing support. Its flexible data model also allows for easy aggregation andscalability, as well as efficient storage and retrieval of data.In addition, fast data access and retrieval are made possible by in-memory storageand indexing, and MongoDB\u2019s query language offers a wide range of operators andfunctions for data filtering and transformation. Additionally, working with bigdatasets can be more performant thanks to MongoDB\u2019s usage of memory-mappedfiles.PostgreSQL is widely known for its performance, stability, and reliability. It isdesigned to handle large amounts of structured data and provides a range offeatures for optimizing performance, including indexing, query optimization, andcaching. PostgreSQL also allows for the efficient retrieval of data based on specificconditions. The query optimizer in PostgreSQL uses cost-based analysis to select themost efficient execution plan for each query, and the database also supports in-memory caching of data, which can greatly improve query performance.Furthermore, PostgreSQL provides a range of advanced features, such as multi-version concurrency control, which enables effective management of multipleconcurrent transactions, and the ability to create custom data types and aggregates.These features can be used to optimise data storage and retrieval for particular usecases.V. Use casesMongoDB:MongoDB is a popular NoSQL database known for its scalability, high performance,and flexible data model.Case 1: E-commerce PlatformsMongoDB can be used to store and manage large amounts of customer data, such asproduct information, user profiles, and order history. Its support for efficientquerying and indexing makes it well-suited for e-commerce platforms, where fastand responsive performance is critical. For example, an online retailer could useMongoDB to store and manage information about its products, customers, andorders, allowing for fast and personalized shopping experiences for users.29/07/2024, 12:41Dive into MongoDB &"
    ],
    [
      "Dive into MongoDB & PostgreSQLContents: MongoDB, PostgreSQL, SQL and NoSQL databasesML-learners\u00b7FollowPublished inSFU Professional Computer Science13 min read\u00b7Feb 11, 2023ListenShare\nCR: https://www.toptal.com/database/database-design-bad-practicesIn this post, we will use PostgreSQL and MongoDB as examples to introduce thedifferences between these two types of databases and their respective benefits. Read on tolearn when and where you can apply them.Authors: Guanghua Yang, Jianan Li, Kelvin Li, Lexi Ke, Freya LiThis blog is written and maintained by students in the Master of Science in ProfessionalComputer Science Program at Simon Fraser University as part of their course credit. Tolearn more about this unique program, please visit sfu.ca/computing/mpcs.\nOpen in appSign upSign inSearch\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.1/25",
      "db.createCollection(\"users\", {  validator: {    $jsonSchema: {      bsonType: \"object\",      required: [\"username\", \"password\"],      properties: {        name: {          bsonType: \"string\"        },        password: {          bsonType: \"string\",          minLength: 8        }      }    }  }})III. PostgreSQL\n1. Overview of PostgreSQLPostgreSQL is an open-source relational database management system (RDBMS)that is well-known for its advanced SQL features, scalability, high availability, andstrong security and data integrity. It is a community-driven development projectthat emphasizes scalability and standard compliance. PostgreSQL provides a rangeof advanced SQL functions, including support for complex data types andtransactions. The system is highly scalable and features built-in replication andconnection pooling for high availability. It is capable of processing complex queriesefficiently even at large scales and has robust security features like fine-grainedaccess control and encryption. The user community of PostgreSQL is extensive andwell-developed, providing ample resources for users.\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.8/25",
      "https://www.mongodb.com/docs/atlas/driver-connection/https://www.mongodb.com/docs/mongodb-shell/connect/https://aws.amazon.com/rds/postgresql/what-is-postgresql/https://www.cybertec-postgresql.com/en/postgresql-overview/solutions-who-uses-postgresql/\nFollowWritten by ML-learners3 Followers\u00b7Writer for SFU Professional Computer ScienceMore from ML-learners and SFU Professional Computer ScienceMongodbPostgresqlNoSQLDatabaseSql\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.17/25",
      "Real World Example: eBay: https://www.mongodb.com/blog/post/ebay-building-mission-critical-multi-data-center-applications-with-mongodbCase 2: Real-time AnalyticsIn this use case, MongoDB can be used to store and analyze large amounts of data inreal-time. MongoDB\u2019s support for horizontal scaling and efficient indexing makes itwell-suited for processing high-volume, high-velocity data streams. For example, afinancial services company could use MongoDB to store and analyze stock marketdata in real-time, allowing traders to make informed decisions based on up-to-dateinformation.Real World Example: Weather Channel: https://www.mongodb.com/press/mongodb-chosen-technology-provider-deliver-accurate-data-weather-channel-hundreds-thousandsPostgreSQLPostgreSQL is a sophisticated, open-source relational database solution designed forenterprise use. It offers the ability to run both SQL and JSON queries, allowing forboth relational and non-relational data management.Case 1: Web technology and NoSQL workloadsTo meet the demands of consumers, a modern website may have to handle a largenumber of requests, potentially ranging from tens of thousands to hundreds ofthousands per second. The PostgreSQL community has made great efforts toaddress the scalability issues.PostgreSQL can work seamlessly with a wide range of web frameworks, includingbut not restricted to: Ruby on Rails, PHP, node.js, Hibernate, Django (Python), and alot more. The replication capabilities of PostgreSQL make it simple to expandwebsites to as many database servers as necessary.Aside from functioning as a relational database, PostgreSQL also has the capabilityto perform as a NoSQL-style data storage system. There does not have to be aconflict between the relational environment and the document-orientedenvironment. Both are available in a single product.Real-World Example: Reddit29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science"
    ],
    [
      "indexing support. Its flexible data model also allows for easy aggregation andscalability, as well as efficient storage and retrieval of data.In addition, fast data access and retrieval are made possible by in-memory storageand indexing, and MongoDB\u2019s query language offers a wide range of operators andfunctions for data filtering and transformation. Additionally, working with bigdatasets can be more performant thanks to MongoDB\u2019s usage of memory-mappedfiles.PostgreSQL is widely known for its performance, stability, and reliability. It isdesigned to handle large amounts of structured data and provides a range offeatures for optimizing performance, including indexing, query optimization, andcaching. PostgreSQL also allows for the efficient retrieval of data based on specificconditions. The query optimizer in PostgreSQL uses cost-based analysis to select themost efficient execution plan for each query, and the database also supports in-memory caching of data, which can greatly improve query performance.Furthermore, PostgreSQL provides a range of advanced features, such as multi-version concurrency control, which enables effective management of multipleconcurrent transactions, and the ability to create custom data types and aggregates.These features can be used to optimise data storage and retrieval for particular usecases.V. Use casesMongoDB:MongoDB is a popular NoSQL database known for its scalability, high performance,and flexible data model.Case 1: E-commerce PlatformsMongoDB can be used to store and manage large amounts of customer data, such asproduct information, user profiles, and order history. Its support for efficientquerying and indexing makes it well-suited for e-commerce platforms, where fastand responsive performance is critical. For example, an online retailer could useMongoDB to store and manage information about its products, customers, andorders, allowing for fast and personalized shopping experiences for users.29/07/2024, 12:41Dive into MongoDB &",
      "while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and semi-structured data. It achieves thisperformance through several optimizations, including its document-oriented datamodel, horizontal scaling through sharding, in-memory storage capabilities, and29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science",
      "Dive into MongoDB & PostgreSQLContents: MongoDB, PostgreSQL, SQL and NoSQL databasesML-learners\u00b7FollowPublished inSFU Professional Computer Science13 min read\u00b7Feb 11, 2023ListenShare\nCR: https://www.toptal.com/database/database-design-bad-practicesIn this post, we will use PostgreSQL and MongoDB as examples to introduce thedifferences between these two types of databases and their respective benefits. Read on tolearn when and where you can apply them.Authors: Guanghua Yang, Jianan Li, Kelvin Li, Lexi Ke, Freya LiThis blog is written and maintained by students in the Master of Science in ProfessionalComputer Science Program at Simon Fraser University as part of their course credit. Tolearn more about this unique program, please visit sfu.ca/computing/mpcs.\nOpen in appSign upSign inSearch\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.1/25",
      "https://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.15/25"
    ],
    [
      "while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and semi-structured data. It achieves thisperformance through several optimizations, including its document-oriented datamodel, horizontal scaling through sharding, in-memory storage capabilities, and29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science",
      "Dive into MongoDB & PostgreSQLContents: MongoDB, PostgreSQL, SQL and NoSQL databasesML-learners\u00b7FollowPublished inSFU Professional Computer Science13 min read\u00b7Feb 11, 2023ListenShare\nCR: https://www.toptal.com/database/database-design-bad-practicesIn this post, we will use PostgreSQL and MongoDB as examples to introduce thedifferences between these two types of databases and their respective benefits. Read on tolearn when and where you can apply them.Authors: Guanghua Yang, Jianan Li, Kelvin Li, Lexi Ke, Freya LiThis blog is written and maintained by students in the Master of Science in ProfessionalComputer Science Program at Simon Fraser University as part of their course credit. Tolearn more about this unique program, please visit sfu.ca/computing/mpcs.\nOpen in appSign upSign inSearch\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.1/25",
      "Real World Example: eBay: https://www.mongodb.com/blog/post/ebay-building-mission-critical-multi-data-center-applications-with-mongodbCase 2: Real-time AnalyticsIn this use case, MongoDB can be used to store and analyze large amounts of data inreal-time. MongoDB\u2019s support for horizontal scaling and efficient indexing makes itwell-suited for processing high-volume, high-velocity data streams. For example, afinancial services company could use MongoDB to store and analyze stock marketdata in real-time, allowing traders to make informed decisions based on up-to-dateinformation.Real World Example: Weather Channel: https://www.mongodb.com/press/mongodb-chosen-technology-provider-deliver-accurate-data-weather-channel-hundreds-thousandsPostgreSQLPostgreSQL is a sophisticated, open-source relational database solution designed forenterprise use. It offers the ability to run both SQL and JSON queries, allowing forboth relational and non-relational data management.Case 1: Web technology and NoSQL workloadsTo meet the demands of consumers, a modern website may have to handle a largenumber of requests, potentially ranging from tens of thousands to hundreds ofthousands per second. The PostgreSQL community has made great efforts toaddress the scalability issues.PostgreSQL can work seamlessly with a wide range of web frameworks, includingbut not restricted to: Ruby on Rails, PHP, node.js, Hibernate, Django (Python), and alot more. The replication capabilities of PostgreSQL make it simple to expandwebsites to as many database servers as necessary.Aside from functioning as a relational database, PostgreSQL also has the capabilityto perform as a NoSQL-style data storage system. There does not have to be aconflict between the relational environment and the document-orientedenvironment. Both are available in a single product.Real-World Example: Reddit29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science",
      "DELETEFROM customersWHERE customer_info->>'name' = 'John Doe';IV. Differences between MongoDB and PostgreSQL\n1. Data ModelMongoDB uses a document-based data model, while PostgreSQL uses a relationaldata model.MongoDB uses a document-oriented data model, which is based on a collection ofJSON-style documents. In this model, each document can have a different structure,allowing for flexible and dynamic data modeling. Because of this, MongoDB is agood choice for companies requiring adaptable and dynamic data structures, likeweb and mobile apps, real-time analytics, and content management systems. Thisdocument-based model allows for easy aggregation and scalability that can handlecomplex queries using document nested structures and indexes.On the other hand, PostgreSQL uses a relational data model, based on a collection oftables with defined schemas. In this model, data is organized into tables, whereeach row represents an individual record, and each column corresponds to aspecific field of the record. Data in the tables is organized in a way that eliminates29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.12/25"
    ],
    [
      "Dive into MongoDB & PostgreSQLContents: MongoDB, PostgreSQL, SQL and NoSQL databasesML-learners\u00b7FollowPublished inSFU Professional Computer Science13 min read\u00b7Feb 11, 2023ListenShare\nCR: https://www.toptal.com/database/database-design-bad-practicesIn this post, we will use PostgreSQL and MongoDB as examples to introduce thedifferences between these two types of databases and their respective benefits. Read on tolearn when and where you can apply them.Authors: Guanghua Yang, Jianan Li, Kelvin Li, Lexi Ke, Freya LiThis blog is written and maintained by students in the Master of Science in ProfessionalComputer Science Program at Simon Fraser University as part of their course credit. Tolearn more about this unique program, please visit sfu.ca/computing/mpcs.\nOpen in appSign upSign inSearch\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.1/25",
      "The MongoDB Shell (mogosh) is one of the options to connect to users\u2019 MongoDBinstances, it is a Node.js environment for interacting with MongoDB instances.InstallationThe MongoDB Shell can be downloaded via the official download center:https://www.mongodb.com/try/download/shellConnect to cloud hosted deployment (MongoDB Atlas)The following Shell command will allow the user to connect to its MongoDB Atlasdeployment:mongosh \"mongodb+srv://cluster0.nuu4c9d.mongodb.net/<DataBase Name>\" - usernameConnect to a local deploymentThe following Shell command will allow the user to connect to its own deployment:# standalone deployment on a local hostmongosh \"mongodb://localhost:27017\"# standalone deployment on remote hostmongosh \"mongodb://mongodb0.example.com:27017\"3.1.3 Using MongoDB DriverUsers can also connect to MongoDB directly from their application using the officiallibraries. Below are two examples of connecting to MongoDB using Node.js andPython provided in MongoDB\u2019s documentation:const MongoClient = require('mongodb').MongoClient;const uri = \"mongodb+srv://kay:<Password>@cluster0.mongodb.net/test?w=majority\"const client = new MongoClient(uri, { useNewUrlParser: true });client.connect(err => {const collection = client.db(\"test\").collection(\"devices\");// perform CRUD operations29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.5/25",
      "SELECT * FROM soundtrack WHERE status in (\"A\", \"C\")3. Update documentsDocuments can be updated through MongoDB Shell using db.<collection>.updateOne(), note that the keywords of the query are denoted by adollar sign \u201c$\u201d. Below is an example that updates the first document where the field\u201cname\u201d equals \u201csoundtrack01\u201d, the $set keyword will update the field \u201cuom\u201d to\u201cmin\u201d and the field \u201dupdated\u201d to \u201cP\u201d.db.soundtrack.updateOne({ name: \"soundtrack01\" },{ $set: { \"uom\": \"min\", \"updated\": \"P\" }})4. Delete documentsDocuments can be deleted through MongoDB Shell using db.<collection>.deleteOne(). Below is an example that deletes the first document wherethe field \u201cname\u201d equals \u201csoundtrack01\u201ddb.inventory.deleteOne( {\"name\": \"soundtrack01\" } )5. Create a collection with a validation schemaAlthough by default the collection in MongoDB doesn\u2019t enforce a schema, it canenforce a validation schema if provided with the requirements. When validationschema is enforced, documents that didn\u2019t fulfill the requirements will not be ableto be saved into the collection. Below is an example of a validation schema thatrequires two fields: \u201cusername\u201d and \u201cpassword\u201d where the username has to be astring, and the password also has to be a string with at least 8 characters.29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.7/25",
      "2. How to use PostgreSQL2.1 Get started with PostgreSQLHere are a few steps you need to know to get started with PostgreSQL.Installation: Download the latest version of PostgreSQL from the official websitePostgreSQL: Downloads, and follow the instructions on the page.Database set up: After installation of PostgreSQL, you can choose to create a newdatabase either through the default PostgreSQL database or a new one. Toimplement successfully, you can run the \u2018createdb\u2019 command in the terminal.Database connection: Use the \u2018psql\u2019 command to connect with the database. Asrequested, you will provide a PostgreSQL username and password forpermission to enter.Workspace: Once connected to the database, we can then create tables for thefirst step, and then we can choose to insert data, execute queries, etc.Further learning: Structured Query Language (known as SQL) is the moststandard language tool to use for relational databases. Therefore, it isrecommended for users to learn SQL to get the most understanding of the usageof PostgreSQL.2.2 PostgreSQL CRUD Operation2.2.1 SQL version CRUDSQL (Structured Query Language) Example for CRUD operations in PostgreSQL:1. Create Table:A table can be created through PostgreSQL using the <CREATE TABLE> command.This CREATE operation is to create a Table named \u201cusers\u201d in a database. This tablehas 4 attributes, including id (as the primary key), name, email, and age.CREATE TABLE users (id SERIAL PRIMARY KEY,name TEXT NOT NULL,email TEXT NOT NULL UNIQUE,29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.9/25"
    ],
    [
      "2. How to use PostgreSQL2.1 Get started with PostgreSQLHere are a few steps you need to know to get started with PostgreSQL.Installation: Download the latest version of PostgreSQL from the official websitePostgreSQL: Downloads, and follow the instructions on the page.Database set up: After installation of PostgreSQL, you can choose to create a newdatabase either through the default PostgreSQL database or a new one. Toimplement successfully, you can run the \u2018createdb\u2019 command in the terminal.Database connection: Use the \u2018psql\u2019 command to connect with the database. Asrequested, you will provide a PostgreSQL username and password forpermission to enter.Workspace: Once connected to the database, we can then create tables for thefirst step, and then we can choose to insert data, execute queries, etc.Further learning: Structured Query Language (known as SQL) is the moststandard language tool to use for relational databases. Therefore, it isrecommended for users to learn SQL to get the most understanding of the usageof PostgreSQL.2.2 PostgreSQL CRUD Operation2.2.1 SQL version CRUDSQL (Structured Query Language) Example for CRUD operations in PostgreSQL:1. Create Table:A table can be created through PostgreSQL using the <CREATE TABLE> command.This CREATE operation is to create a Table named \u201cusers\u201d in a database. This tablehas 4 attributes, including id (as the primary key), name, email, and age.CREATE TABLE users (id SERIAL PRIMARY KEY,name TEXT NOT NULL,email TEXT NOT NULL UNIQUE,29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.9/25",
      "In PostgreSQL, you can create a record by using the \u2018INSERT\u2019 statement to insert aJSON object into a table column that has been defined as the \u2018json\u2019 or \u2018jsonb\u2019 datatype. For example:CREATE TABLE customers ( id serial PRIMARY KEY, customer_info jsonb );INSERT INTO customers (customer_info)VALUES ('{\"name\": \"John Doe\", \"email\": \"jdoe@example.com\", \"age\": 30}');2. Querying RecordsTo query records in PostgreSQL, you can use the \u2018SELECT\u2019 statement along with the\u2018->>\u2019 operator to extract specific values from the JSON object stored in the table. Forexample:SELECT customer_info->>'name' AS name, customer_info->>'email' AS email, custom3. Updating RecordsTo update a record in PostgreSQL, you can use the \u2018UPDATE\u2019 statement along withthe \u2018->>\u2019 operator to modify specific values within the JSON object stored in thetable. For example:UPDATE customersSET customer_info = customer_info || '{\"age\": 31}'WHERE customer_info->>'name' = 'John Doe';4. Deleting RecordsTo delete a record in PostgreSQL, you can use the \u2018DELETE\u2019 statement along with a\u2018WHERE\u2019 clause to specify the document you want to delete. For example:29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.11/25",
      "Dive into MongoDB & PostgreSQLContents: MongoDB, PostgreSQL, SQL and NoSQL databasesML-learners\u00b7FollowPublished inSFU Professional Computer Science13 min read\u00b7Feb 11, 2023ListenShare\nCR: https://www.toptal.com/database/database-design-bad-practicesIn this post, we will use PostgreSQL and MongoDB as examples to introduce thedifferences between these two types of databases and their respective benefits. Read on tolearn when and where you can apply them.Authors: Guanghua Yang, Jianan Li, Kelvin Li, Lexi Ke, Freya LiThis blog is written and maintained by students in the Master of Science in ProfessionalComputer Science Program at Simon Fraser University as part of their course credit. Tolearn more about this unique program, please visit sfu.ca/computing/mpcs.\nOpen in appSign upSign inSearch\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.1/25",
      "db.createCollection(\"users\", {  validator: {    $jsonSchema: {      bsonType: \"object\",      required: [\"username\", \"password\"],      properties: {        name: {          bsonType: \"string\"        },        password: {          bsonType: \"string\",          minLength: 8        }      }    }  }})III. PostgreSQL\n1. Overview of PostgreSQLPostgreSQL is an open-source relational database management system (RDBMS)that is well-known for its advanced SQL features, scalability, high availability, andstrong security and data integrity. It is a community-driven development projectthat emphasizes scalability and standard compliance. PostgreSQL provides a rangeof advanced SQL functions, including support for complex data types andtransactions. The system is highly scalable and features built-in replication andconnection pooling for high availability. It is capable of processing complex queriesefficiently even at large scales and has robust security features like fine-grainedaccess control and encryption. The user community of PostgreSQL is extensive andwell-developed, providing ample resources for users.\n29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.8/25"
    ],
    [
      "DELETEFROM customersWHERE customer_info->>'name' = 'John Doe';IV. Differences between MongoDB and PostgreSQL\n1. Data ModelMongoDB uses a document-based data model, while PostgreSQL uses a relationaldata model.MongoDB uses a document-oriented data model, which is based on a collection ofJSON-style documents. In this model, each document can have a different structure,allowing for flexible and dynamic data modeling. Because of this, MongoDB is agood choice for companies requiring adaptable and dynamic data structures, likeweb and mobile apps, real-time analytics, and content management systems. Thisdocument-based model allows for easy aggregation and scalability that can handlecomplex queries using document nested structures and indexes.On the other hand, PostgreSQL uses a relational data model, based on a collection oftables with defined schemas. In this model, data is organized into tables, whereeach row represents an individual record, and each column corresponds to aspecific field of the record. Data in the tables is organized in a way that eliminates29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.12/25",
      "relational databases. Below is an example of a document, the \u201c_id\u201d field is anautomatically generated primary key for this document.{   \"_id\": ObjectId(\"5f1437b936c67f5c04adf38a\"),   \"name\": \"David Wilson\",   \"age\": 25,   \"address\": {   \"street\": \"987 Broadway\",   \"city\": \"New York\",   \"state\": \"NY\",   \"zipcode\": 10010   },   \"employee_since\": ISODate(\"2022-01-01T00:00:00Z\")}2.2 CollectionA collection in MongoDB consists of a group of related documents, it is equivalent toa table in a relational database. Yet the collection by default will not strictly enforcea fixed schema (the key difference between a collection and a table), which meansthe documents in one collection can have different fields.3. Get started with MongoDB3.1 Connect to MongoDB3.1.1 MongoDB deploymentBefore connecting to MongoDB, a MongoDB instance needs to be created first, it canbe either an instance deployed using MongoDB Atlas or a standalone instancehosted on a user\u2019s own machine.MongoDB Atlas is a fully managed service in the cloud, allowing for easy setupwithout the need to manage the underlying infrastructure. Standalone MongoDBinstances require software downloads and management infrastructure whileproviding the user with greater control and customization.3.1.2 Using MongoDB Shell29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.4/25",
      "redundant information and ensures data integrity through constraints andreferential integrity. This characteristic makes PostgreSQL a powerful tool forcompanies that require strict data consistency and complex data manipulations,such as financial systems, data warehousing, and business intelligence software.In general, the choice between MongoDB and PostgreSQL will depend on thespecific requirements, including the size and complexity of the data being stored,the specific workload demands, and the balance between flexible data modellingand strict data consistency.2. Query languageMongoDB and PostgreSQL have different query languages because of the differentdata models used that they choose.MongoDB uses a query language based on the MongoDB query syntax, which isdesigned to support querying and manipulating the semi-structured data stored inMongoDB documents. MQL is used to search and retrieve data from MongoDBcollections. The syntax is straightforward and easy to understand, even for non-technical users. This makes MongoDB a good choice for developers who need toquickly prototype and build applications.Meanwhile, PostgreSQL uses a query language based on the Structured QueryLanguage (SQL), which is a widely used and well-established standard for relationaldatabases. The SQL query language supports a wide range of query types, includingsimple select statements, as well as more complex join operations, subqueries, andtransactions. SQL also supports the use of subqueries, transactions, and storedprocedures for more complex data manipulations. Queries in PostgreSQL can beexecuted using the SELECT statement, and results can be returned in a variety offormats, including tables, arrays, and key-value pairs.3. PerformanceMongoDB is faster for read-heavy or write-heavy workloads, while PostgreSQL isbetter suited for complex transactions and data analysis.MongoDB is designed for high performance and scalability and is well-suited forhandling large amounts of unstructured and",
      "Table of ContentI. IntroductionII. MongoDB- Overview of MongoDB and NoSQL databases- MongoDB Basic Concepts- Get started with MongoDBIII. PostgreSQL- Overview of PostgreSQL- How to use PostgreSQLIV. Differences between MongoDB and PostgreSQL- Data Model- Query language- PerformanceV. Use cases- MongoDB- PostgreSQLVI. ConclusionI. Introductionre you aware that numerous service providers will collect your data while youuse your computer and mobile device? Your present position will be utilized,for instance, when you use Google Maps to navigate; when you shop online, yourcredit card information will be used to pay the fees; etc. Do you know how is such amassive amount of data collected and stored to better the lives of individuals?These pieces of information are kept in a place called a database. It\u2019s like a hugewarehouse that can hold a lot of data and be used by many people at the same time.Because of this, the database is an important part of all information systems, nomatter how large or small they are or what type of business they are for.A29/07/2024, 12:41Dive into MongoDB & PostgreSQL | SFU Professional Computer Science\nhttps://medium.com/sfu-cspmp/dive-into-mongodb-postgresql-d8bbbda3cb24#:~:text=3.-,Performance,unstructured and semi-structured data.2/25"
    ]
  ]
}